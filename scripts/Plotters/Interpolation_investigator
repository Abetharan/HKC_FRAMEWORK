def SI_plotter(path, run_name, variable, time_step, ne, Z, Ar, Te, Bz,iter_number = None ):
    """ Purpose:
                Plots any variable at specificed time step with SI units. 
        Args:
            Path = path to data
            run_name = Run name i.e. name in front of variables on files
            variable = variable considered
            time_step = time step
            ne = ele density in per cc
            Z = ionisatoin
            Ar = atomic number
            T = temperature in eV
            Bz = magnetic fields in tesla 
     """

    normal_dict = IN.impact_inputs(ne,Te,Z,Bz,Ar) # get dictionary containing reference IMPACT vars
    lambda_mfp = normal_dict['lambda_mfp']
    lambda_mfp_mu = lambda_mfp*1e6
    xstep_factor = lambda_mfp_mu
    tstep_factor = normal_dict['tau_ei']*1e12

    #norm_const, title, c_fmt = IN.calc_norms(variable,normal_dict,sample =0.0,forced_power=[])  


    norm_constant = 9.11E-31 * normal_dict['vte']**3 * normal_dict['ne'] * 1e6
    dictionary_of_info = cf.load_dict(path,run_name,variable,time_step, iter_number)
    var_mat_dict = dictionary_of_info['mat']
    iy  = int(np.shape(var_mat_dict)[-1]/2)
    var_array = var_mat_dict[:]  * norm_constant # * normal_dict['Te'] * 2
    #np.savetxt('/home/abetharan/HeadlessHydra/init_data/ne.txt', var_array[1:-1, 1])
    #np.savetxt('/home/abetharan/HeadlessHydra/init_data/ni.txt', var_array[1:-1, 1])
    xgrid = dictionary_of_info['x_grid']
    centered_xgrid = []
    nx = 30
    HeatConduction = np.zeros(nx)
    fluid_coord= np.loadtxt(os.path.join(path1, "lin60/cycle_30/fluid_input/coord.txt"))
    centered_fluid_coord = []
    for i in range(nx):
        HeatConduction[i] = - (var_array[i + 1] - var_array[i]) / 4.726164779003052695e-06
        centered_xgrid.append((xgrid[i + 1] + xgrid[i]) / 2)
    
    centered_fluid_coord = [((fluid_coord[i + 1] + fluid_coord[i]) / 2) for i in range(len(fluid_coord) - 1)]
    plt.figure(1)
    plt.plot(centered_xgrid, HeatConduction, 'k-')
    plt.plot(centered_fluid_coord ,np.loadtxt(os.path.join(path1, "lin60/cycle_30/fluid_input/qe.txt")), 'r--')

    #plt.plot(var_array[1:-1, 1], "k-")
    plt.xlabel('X in micro meter')
    plt.ylabel(variable + ' / SI unit')
    plt.title(variable + " at time: " + str(float(time_step)*tstep_factor) + "/ps")
    plt.show()


import os

# # #path = '/media/abetharan/DATADRIVE1/Abetharan/IMPACT_RESULTS/small_1_nwl_cos_pertub'
#path = '/media/abetharan/DATADRIVE1/Abetharan/couple2/cycle_0/kinetic_output/'
path1 = "/media/abetharan/DATADRIVE1/Abetharan/Ncub90/"
path1 = "/media/abetharan/DATADRIVE1/Abetharan/Spitzer"
path1 = "/media/abetharan/DATADRIVE1/Abetharan/non_local"
path1 = "/media/abetharan/DATADRIVE1/Abetharan/"
#path1 = "/home/abetharan/IMPACT/RUNS/A6_INITIAL_DATA/cycle_1/"
name = "default"#"BrodrickComparison

plt.figure(1)

SI_plotter(os.path.join(path1, "lin60/cycle_29/kinetic_output/"), name, "qxX", "07", 1e20, 64, 157, 300, 0)
